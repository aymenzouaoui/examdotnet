// <auto-generated />
using System;
using EX.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EX.Data.Migrations
{
    [DbContext(typeof(EXContext))]
    [Migration("20240512233309_ddd")]
    partial class ddd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EX.Core.Domain.Activite", b =>
                {
                    b.Property<int>("activiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("activiteId"));

                    b.Property<int?>("packId")
                        .HasColumnType("int");

                    b.Property<string>("prix")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("typeService")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("activiteId");

                    b.HasIndex("packId");

                    b.ToTable("activites");
                });

            modelBuilder.Entity("EX.Core.Domain.CLient", b =>
                {
                    b.Property<int>("identifiant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("identifiant"));

                    b.Property<int?>("ConseillerFK")
                        .HasColumnType("int");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("identifiant");

                    b.HasIndex("ConseillerFK");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EX.Core.Domain.Conseiller", b =>
                {
                    b.Property<int>("conseillerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("conseillerId"));

                    b.Property<string>("conseillrName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("conseillerId");

                    b.ToTable("Conseillers");
                });

            modelBuilder.Entity("EX.Core.Domain.Pack", b =>
                {
                    b.Property<int>("packId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("packId"));

                    b.Property<int>("Duree")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("intitulePack")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("nbPlaces")
                        .HasColumnType("int");

                    b.HasKey("packId");

                    b.ToTable("packs");
                });

            modelBuilder.Entity("EX.Core.Domain.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("CLientId")
                        .HasColumnType("int");

                    b.Property<int?>("CLientidentifiant")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("nbPersonnes")
                        .HasColumnType("int");

                    b.Property<int>("packId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("CLientId");

                    b.HasIndex("CLientidentifiant");

                    b.HasIndex("packId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("EX.Core.Domain.Activite", b =>
                {
                    b.HasOne("EX.Core.Domain.Pack", null)
                        .WithMany("activites")
                        .HasForeignKey("packId");

                    b.OwnsOne("EX.Core.Domain.Zone", "zone", b1 =>
                        {
                            b1.Property<int>("activiteId")
                                .HasColumnType("int");

                            b1.Property<string>("pays")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("ville")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("activiteId");

                            b1.ToTable("activites");

                            b1.WithOwner()
                                .HasForeignKey("activiteId");
                        });

                    b.Navigation("zone")
                        .IsRequired();
                });

            modelBuilder.Entity("EX.Core.Domain.CLient", b =>
                {
                    b.HasOne("EX.Core.Domain.Conseiller", "Conseiller")
                        .WithMany("clients")
                        .HasForeignKey("ConseillerFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Conseiller");
                });

            modelBuilder.Entity("EX.Core.Domain.Reservation", b =>
                {
                    b.HasOne("EX.Core.Domain.CLient", "cLient")
                        .WithMany()
                        .HasForeignKey("CLientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EX.Core.Domain.CLient", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CLientidentifiant");

                    b.HasOne("EX.Core.Domain.Pack", "pack")
                        .WithMany("reservations")
                        .HasForeignKey("packId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cLient");

                    b.Navigation("pack");
                });

            modelBuilder.Entity("EX.Core.Domain.CLient", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EX.Core.Domain.Conseiller", b =>
                {
                    b.Navigation("clients");
                });

            modelBuilder.Entity("EX.Core.Domain.Pack", b =>
                {
                    b.Navigation("activites");

                    b.Navigation("reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
